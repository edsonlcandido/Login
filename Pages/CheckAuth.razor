@page "/check-auth"
@using System.Security.Claims
@using LoginApp.Data
@using LoginApp.Providers
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider

<h3>Check Authentication</h3>
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <p>Você está logado.</p>
            <p>Claims:</p>
            <ul>
                @foreach (var claim in claims)
                {
                    <li>@claim.Type: @claim.Value</li>
                }
            </ul>
        </Authorized>
        <NotAuthorized>
            <p>Você não está logado.</p>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        if (authState != null)
        {
            var authStateTask = await authState;
            claims = authState.Result.User.Claims;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CustomAuthenticationStateProvider.InitializeAsync();//.GetAuthenticationStateAsync();
            authState = CustomAuthenticationStateProvider.GetAuthenticationStateAsync();
            claims = authState.Result.User.Claims;
            StateHasChanged();
        }        
    }
}
