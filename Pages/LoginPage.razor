@page "/Login"
@using Microsoft.AspNetCore.Components.Authorization
@using LoginApp.Services
@using LoginApp.Shared
@using LoginApp.Data
@using System.Security.Claims
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<div class="text-center">
    <div class="form-signin">
        <h3>Login</h3>
        <hr />
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="exampleInputEmail1">Email address</label>
                <InputText @bind-Value="loginModel.Username" placeholder="Username" class="form-control" /><br />
            </div>
            <div class="form-group">
                <label for="exampleInputPassword1">Password</label>
                <InputText @bind-Value="loginModel.Password" placeholder="Password" type="password" class="form-control" /><br />
            </div>
            <button type="submit" class="btn btn-lg btn-primary">Login</button>
        </EditForm>
    </div>
    @if (returnToken != "")
    {
        <p class="token-container">Token: @returnToken</p>
    }
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool loginFailed;

    private string returnToken = "";
    AuthenticationState? authState;
    ClaimsPrincipal? user;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private async Task HandleLogin()
    {
        // var token = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
        loginFailed = !await AuthenticationStateProvider.LoginAsync(loginModel.Username, loginModel.Password);
        if (!loginFailed)
        {
            // Armazenar o token e navegar para uma página protegida
            // Para simplicidade, este exemplo apenas navega para a mesma página             
            //await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);

            //Navigation.NavigateTo("/check-auth");
            authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                claims = user.Claims;
            }
            Navigation.NavigateTo("/check-auth");
        }


        //returnToken = token;
        StateHasChanged();
    }

    private class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}