@page "/Login"
@using System.Security.Claims
@using LoginApp.Models
@using LoginApp.Providers
@using LoginApp.Requests
@using Microsoft.AspNetCore.Components.Authorization
@using LoginApp.Services
@using LoginApp.Shared
@using LoginApp.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject JwtService JwtService

<PageTitle>Login</PageTitle>

<div class="text-center">
    <div class="form-signin">
        <h3>Login</h3>
        <hr />
        <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="exampleInputEmail1">Email address</label>
                <InputText @bind-Value="loginRequest.Username" placeholder="Username" class="form-control" /><br />
            </div>
            <div class="form-group">
                <label for="exampleInputPassword1">Password</label>
                <InputText @bind-Value="loginRequest.Password" placeholder="Password" type="password" class="form-control" /><br />
            </div>
            <button type="submit" class="btn btn-lg btn-primary">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private bool loginFailed;
    //private AuthenticationState authState;

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;
    [CascadingParameter]
    private AuthenticationState authState{ get; set; }

    private async Task HandleLogin()
    {
        var response = await AuthService.LoginAsync(loginRequest.Username, loginRequest.Password);
        if (response.Token != null)
        {
            //CustomAuthenticationStateProvider customAuthentication = new CustomAuthenticationStateProvider();
            ClaimsPrincipal claimsPrincipal = AuthenticationStateProvider.MarkUserAsAuthenticated(response);
            authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            string authToken = JwtService.GenerateSecurityToken(claimsPrincipal);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", authToken);
        }
        //StateHasChanged();
    }
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }
}